name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  dependabot-automerge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine auto-merge eligibility
        id: automerge-check
        run: |
          echo "PR Details:"
          echo "- Update type: ${{ steps.metadata.outputs.update-type }}"
          echo "- Dependency type: ${{ steps.metadata.outputs.dependency-type }}"
          echo "- Package ecosystem: ${{ steps.metadata.outputs.package-ecosystem }}"
          echo "- Dependency names: ${{ steps.metadata.outputs.dependency-names }}"
          echo "- PR has automerge label: ${{ contains(github.event.pull_request.labels.*.name, 'automerge') }}"
          
          # Initialize variables
          SHOULD_AUTOMERGE="false"
          MERGE_METHOD="squash"
          
          # Security updates - always auto-merge after CI passes
          if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]] && [[ "${{ contains(github.event.pull_request.labels.*.name, 'security') }}" == "true" ]]; then
            echo "✅ Security patch update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # Patch updates for production dependencies
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]] && [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:production" ]]; then
            echo "✅ Production patch update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # Patch updates for development dependencies
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]] && [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:development" ]]; then
            echo "✅ Development patch update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # Minor updates for development dependencies only
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]] && [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:development" ]]; then
            echo "✅ Development minor update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # GitHub Actions updates (usually safe)
          elif [[ "${{ steps.metadata.outputs.package-ecosystem }}" == "github-actions" ]]; then
            echo "✅ GitHub Actions update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # Docker updates (if they pass CI)
          elif [[ "${{ steps.metadata.outputs.package-ecosystem }}" == "docker" ]]; then
            echo "✅ Docker update - eligible for auto-merge"
            SHOULD_AUTOMERGE="true"
          
          # Grouped updates with automerge label
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'automerge') }}" == "true" ]]; then
            echo "✅ Labeled for auto-merge - eligible"
            SHOULD_AUTOMERGE="true"
          
          # Major updates - never auto-merge
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-major" ]]; then
            echo "❌ Major version update - requires manual review"
            SHOULD_AUTOMERGE="false"
          
          # Minor updates for production dependencies - be cautious
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]] && [[ "${{ steps.metadata.outputs.dependency-type }}" == "direct:production" ]]; then
            echo "⚠️  Production minor update - requires manual review"
            SHOULD_AUTOMERGE="false"
          
          else
            echo "❓ Unknown update type - requires manual review"
            SHOULD_AUTOMERGE="false"
          fi
          
          echo "should-automerge=$SHOULD_AUTOMERGE" >> $GITHUB_OUTPUT
          echo "merge-method=$MERGE_METHOD" >> $GITHUB_OUTPUT

      # Enable auto-merge immediately - GitHub will wait for required checks
      # This is more reliable than manually waiting for checks
      - name: Enable auto-merge (immediate)
        if: steps.automerge-check.outputs.should-automerge == 'true'
        id: enable-automerge
        continue-on-error: true
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: ${{ steps.automerge-check.outputs.merge-method }}

      # Wait for checks only if immediate enable failed (fallback method)
      - name: Wait for all required checks (fallback)
        if: steps.automerge-check.outputs.should-automerge == 'true' && steps.enable-automerge.outcome == 'failure'
        id: wait-for-checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxAttempts = 60; // 30 minutes with 30 second intervals
            const intervalMs = 30000; // 30 seconds
            let attempts = 0;
            
            async function checkAllChecks() {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha,
              });
              
              const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha,
              });
              
              console.log(`Check runs: ${checkRuns.check_runs.length}`);
              console.log(`Statuses: ${statuses.statuses.length}`);
              
              // Check if any checks are still pending or in progress
              const pendingChecks = checkRuns.check_runs.filter(check => 
                check.status !== 'completed' && 
                check.name !== 'Auto-merge Dependabot PRs' &&
                check.name !== 'Auto-approve safe Dependabot updates' &&
                check.name !== 'Fast-track Security Updates'
              );
              
              const failedChecks = checkRuns.check_runs.filter(check => 
                check.status === 'completed' && 
                check.conclusion !== 'success' && 
                check.conclusion !== 'skipped' &&
                check.conclusion !== 'neutral' &&
                check.name !== 'Auto-merge Dependabot PRs' &&
                check.name !== 'Auto-approve safe Dependabot updates' &&
                check.name !== 'Fast-track Security Updates'
              );
              
              const failedStatuses = statuses.statuses.filter(status => 
                status.state !== 'success' && 
                status.state !== 'pending'
              );
              
              console.log(`Pending checks: ${pendingChecks.length}`);
              console.log(`Failed checks: ${failedChecks.length}`);
              console.log(`Failed statuses: ${failedStatuses.length}`);
              
              if (failedChecks.length > 0 || failedStatuses.length > 0) {
                console.log('Some checks failed');
                return 'failure';
              }
              
              if (pendingChecks.length > 0 || statuses.state === 'pending') {
                console.log('Some checks are still pending');
                return 'pending';
              }
              
              console.log('All checks passed');
              return 'success';
            }
            
            while (attempts < maxAttempts) {
              const result = await checkAllChecks();
              
              if (result === 'success') {
                core.setOutput('conclusion', 'success');
                return;
              } else if (result === 'failure') {
                core.setOutput('conclusion', 'failure');
                core.setFailed('One or more required checks failed');
                return;
              }
              
              attempts++;
              console.log(`Attempt ${attempts}/${maxAttempts} - waiting for checks...`);
              await new Promise(resolve => setTimeout(resolve, intervalMs));
            }
            
            core.setOutput('conclusion', 'timeout');
            core.setFailed('Timeout waiting for checks to complete');

      # Enable auto-merge after waiting for checks (fallback method)
      - name: Enable auto-merge (after checks)
        if: steps.automerge-check.outputs.should-automerge == 'true' && steps.enable-automerge.outcome == 'failure' && steps.wait-for-checks.outputs.conclusion == 'success'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: ${{ steps.automerge-check.outputs.merge-method }}

      - name: Add auto-merge comment
        if: steps.automerge-check.outputs.should-automerge == 'true' && (steps.enable-automerge.outcome == 'success' || steps.wait-for-checks.outputs.conclusion == 'success')
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_request_number: context.issue.number,
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Auto-merge enabled**
              
              This Dependabot PR has been automatically approved for merging because:
              - ✅ Update type: \`${{ steps.metadata.outputs.update-type }}\`
              - ✅ Dependency type: \`${{ steps.metadata.outputs.dependency-type }}\`
              - ✅ All CI checks passed
              - ✅ Security scans completed
              
              The PR will be automatically merged when all required checks pass.
              
              **Dependencies updated:**
              ${{ steps.metadata.outputs.dependency-names }}
              
              ---
              *To disable auto-merge, remove the \`automerge\` label or comment \`@dependabot ignore\`*`
            });

      - name: Add manual review comment
        if: steps.automerge-check.outputs.should-automerge == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🔍 **Manual review required**
              
              This Dependabot PR requires manual review because:
              - Update type: \`${{ steps.metadata.outputs.update-type }}\`
              - Dependency type: \`${{ steps.metadata.outputs.dependency-type }}\`
              
              **Dependencies updated:**
              ${{ steps.metadata.outputs.dependency-names }}
              
              Please review the changes and merge manually if appropriate.
              
              ---
              *To enable auto-merge for this PR, add the \`automerge\` label*`
            });

      - name: Handle CI failure
        if: steps.automerge-check.outputs.should-automerge == 'true' && steps.enable-automerge.outcome == 'failure' && steps.wait-for-checks.outputs.conclusion != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ **Auto-merge cancelled**
              
              This Dependabot PR was eligible for auto-merge but CI checks failed or timed out:
              - CI Status: \`${{ steps.wait-for-checks.outputs.conclusion }}\`
              
              Please review the failing checks and fix any issues before merging.
              
              **Dependencies updated:**
              ${{ steps.metadata.outputs.dependency-names }}`
            });

  # Separate job to handle immediate security updates
  security-automerge:
    name: Fast-track Security Updates
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && contains(github.event.pull_request.labels.*.name, 'security')
    
    steps:
      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve security updates
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add security update comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🚨 **Security Update - Fast-tracked**
              
              This is a security update and has been automatically approved.
              It will be merged as soon as CI checks pass.
              
              **Security advisory:** Please review the security implications of this update.
              
              **Dependencies updated:**
              ${{ steps.metadata.outputs.dependency-names }}`
            });

      - name: Enable auto-merge for security
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash