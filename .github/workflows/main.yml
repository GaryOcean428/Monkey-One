name: Monkey One CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  NODE_VERSION: '18'
  CODEBUFF_PATH: '/home/braden/.nvm/versions/node/v22.12.0/bin/codebuff'

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Codebuff Analysis
        run: |
          if [ -f "${{ env.CODEBUFF_PATH }}" ]; then
            ${{ env.CODEBUFF_PATH }} analyze .
          fi
        
      - name: Check file sizes
        run: |
          find src -type f -name "*.ts" -o -name "*.tsx" | while read file; do
            lines=$(wc -l < "$file")
            if [ "$lines" -gt 200 ]; then
              echo "❌ $file has $lines lines (max 200)"
              exit 1
            fi
          done
        
      - name: Lint check
        run: npm run lint
        
      - name: Type check
        run: npm run type-check

  test:
    name: Testing
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --coverage
        
      - name: Check test coverage
        run: |
          COVERAGE=$(npm run test:coverage | grep "All files" | awk '{print $4}' | cut -d'%' -f1)
          if [ "$COVERAGE" -lt 80 ]; then
            echo "❌ Test coverage is below 80% (current: $COVERAGE%)"
            exit 1
          fi

  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit
        
      - name: Check for sensitive data
        uses: zricethezav/gitleaks-action@master

  documentation:
    name: Documentation Check
    needs: security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Check JSDoc coverage
        run: |
          npm install -g jsdoc-to-markdown
          for file in $(find src -type f -name "*.ts" -o -name "*.tsx"); do
            if ! grep -q "@param" "$file" && grep -q "function" "$file"; then
              echo "❌ Missing JSDoc in $file"
              exit 1
            fi
          done

  deploy:
    name: Deploy
    needs: [code-quality, test, security, documentation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GH_TOKEN }}
          vercel-args: '--prod'

  notify:
    name: Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check workflow status
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "::error::Workflow failed! Check the logs for more details."
          exit 1

      - name: Notify success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "✅ All checks passed and deployment successful!"
