name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '10.6.5'

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets.sarif'
          scanners: 'secret'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-secrets.sarif'

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate --json > audit-results.json || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          scanners: 'vuln'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: pnpm add -g license-checker

      - name: Check licenses
        run: |
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;WTFPL' --excludePrivatePackages --json > licenses.json
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  sast-scan:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, vulnerability-scan, license-check, sast-scan, semgrep-scan]
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "✅ Secret scanning: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret scanning: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.vulnerability-scan.result }}" == "success" ]]; then
            echo "✅ Vulnerability scanning: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Vulnerability scanning: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "✅ License compliance: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ License compliance: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.sast-scan.result }}" == "success" ]]; then
            echo "✅ Static analysis: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Static analysis: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.semgrep-scan.result }}" == "success" ]]; then
            echo "✅ Semgrep scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Semgrep scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi